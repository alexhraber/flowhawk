#!/bin/bash
#
# Pre-commit hook for FlowhawK Network Security Monitor
# Runs tests, linting, and formatting before allowing commits
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}🔍 Running pre-commit checks...${NC}"

# Function to print success
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "go.mod" ]; then
    print_error "Not in a Go project directory"
    exit 1
fi

# Check if required tools are available
command -v go >/dev/null 2>&1 || { print_error "Go is not installed"; exit 1; }

# Run go mod tidy
echo "📦 Tidying Go modules..."
if go mod tidy; then
    print_success "Go modules tidied"
else
    print_error "Failed to tidy Go modules"
    exit 1
fi

# Run gofmt
echo "🎨 Formatting Go code..."
if [ -n "$(gofmt -l .)" ]; then
    print_warning "The following files need formatting:"
    gofmt -l .
    print_error "Please run 'go fmt ./...' to format your code"
    exit 1
else
    print_success "Code is properly formatted"
fi

# Run golangci-lint if available
if command -v golangci-lint >/dev/null 2>&1; then
    echo "🔍 Running linter..."
    if golangci-lint run --timeout=5m; then
        print_success "Linting passed"
    else
        print_error "Linting failed"
        exit 1
    fi
else
    print_warning "golangci-lint not found, skipping linting"
fi

# Run go vet
echo "🔍 Running go vet..."
if go vet ./...; then
    print_success "go vet passed"
else
    print_error "go vet failed"
    exit 1
fi

# Run tests
echo "🧪 Running tests..."
if make test; then
    print_success "Tests passed"
else
    print_error "Tests failed"
    exit 1
fi

# Check for common issues in commit
echo "📝 Checking commit content..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(go)$' || true)

if [ -n "$STAGED_FILES" ]; then
    # Check for debugging statements
    if git diff --cached | grep -E "(fmt\.Print|log\.Print|console\.log)" >/dev/null; then
        print_warning "Debugging statements found in staged files"
        print_warning "Consider removing them before committing"
    fi
    
    # Check for TODO/FIXME comments
    if git diff --cached | grep -E "(TODO|FIXME|XXX)" >/dev/null; then
        print_warning "TODO/FIXME comments found in staged files"
    fi
    
    # Check for large files
    for file in $STAGED_FILES; do
        if [ -f "$file" ] && [ $(wc -c < "$file") -gt 1048576 ]; then  # 1MB
            print_warning "Large file detected: $file ($(du -h "$file" | cut -f1))"
        fi
    done
fi

# Check commit message if it exists
if [ -f .git/COMMIT_EDITMSG ]; then
    COMMIT_MSG=$(cat .git/COMMIT_EDITMSG)
    if [ ${#COMMIT_MSG} -lt 10 ]; then
        print_warning "Commit message is quite short"
    fi
fi

print_success "All pre-commit checks passed!"
echo -e "${GREEN}🚀 Ready to commit!${NC}"